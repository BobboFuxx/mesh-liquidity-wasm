{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ListResponse",
  "type": "object",
  "required": [
    "swaps"
  ],
  "properties": {
    "swaps": {
      "description": "List all open swap ids",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AtomicSwapOrder"
      }
    }
  },
  "definitions": {
    "AtomicSwapOrder": {
      "type": "object",
      "required": [
        "id",
        "maker",
        "path",
        "status"
      ],
      "properties": {
        "cancel_timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "complete_timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "id": {
          "type": "string"
        },
        "maker": {
          "$ref": "#/definitions/MakeSwapMsg"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "taker": {
          "anyOf": [
            {
              "$ref": "#/definitions/TakeSwapMsg"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Height": {
      "type": "object",
      "required": [
        "revision_height",
        "revision_number"
      ],
      "properties": {
        "revision_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision_number": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "MakeSwapMsg": {
      "type": "object",
      "required": [
        "buy_token",
        "create_timestamp",
        "desired_taker",
        "expiration_timestamp",
        "maker_address",
        "maker_receiving_address",
        "sell_token",
        "source_channel",
        "source_port",
        "timeout_height",
        "timeout_timestamp"
      ],
      "properties": {
        "buy_token": {
          "$ref": "#/definitions/Coin"
        },
        "create_timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "desired_taker": {
          "type": "string"
        },
        "expiration_timestamp": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "maker_address": {
          "type": "string"
        },
        "maker_receiving_address": {
          "type": "string"
        },
        "sell_token": {
          "$ref": "#/definitions/Coin"
        },
        "source_channel": {
          "type": "string"
        },
        "source_port": {
          "type": "string"
        },
        "timeout_height": {
          "$ref": "#/definitions/Height"
        },
        "timeout_timestamp": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Status": {
      "type": "string",
      "enum": [
        "INITIAL",
        "SYNC",
        "CANCEL",
        "COMPLETE"
      ]
    },
    "TakeSwapMsg": {
      "type": "object",
      "required": [
        "create_timestamp",
        "order_id",
        "sell_token",
        "taker_address",
        "taker_receiving_address",
        "timeout_height",
        "timeout_timestamp"
      ],
      "properties": {
        "create_timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "order_id": {
          "type": "string"
        },
        "sell_token": {
          "$ref": "#/definitions/Coin"
        },
        "taker_address": {
          "type": "string"
        },
        "taker_receiving_address": {
          "type": "string"
        },
        "timeout_height": {
          "$ref": "#/definitions/Height"
        },
        "timeout_timestamp": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
