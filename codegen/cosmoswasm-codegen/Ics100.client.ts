/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, Uint128, Status, DetailsResponse, MakeSwapMsg, Coin, Height, TakeSwapMsg, ExecuteMsg, CancelSwapMsg, HeightOutput, MakeBidMsg, TakeBidMsg, CancelBidMsg, InstantiateMsg, Side, ListResponse, AtomicSwapOrder, QueryMsg } from "./Ics100.types";
export interface Ics100ReadOnlyInterface {
  contractAddress: string;
  list: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ListResponse>;
  listByDesiredTaker: ({
    desiredTaker,
    limit,
    startAfter
  }: {
    desiredTaker: string;
    limit?: number;
    startAfter?: string;
  }) => Promise<ListByDesiredTakerResponse>;
  listByMaker: ({
    limit,
    maker,
    startAfter
  }: {
    limit?: number;
    maker: string;
    startAfter?: string;
  }) => Promise<ListByMakerResponse>;
  listByTaker: ({
    limit,
    startAfter,
    taker
  }: {
    limit?: number;
    startAfter?: string;
    taker: string;
  }) => Promise<ListByTakerResponse>;
  details: ({
    id
  }: {
    id: string;
  }) => Promise<DetailsResponse>;
  bidDetailsbyOrder: ({
    limit,
    orderId,
    startAfter
  }: {
    limit?: number;
    orderId: string;
    startAfter?: string;
  }) => Promise<BidDetailsbyOrderResponse>;
  bidDetailsbyBidder: ({
    bidder,
    orderId
  }: {
    bidder: string;
    orderId: string;
  }) => Promise<BidDetailsbyBidderResponse>;
}
export class Ics100QueryClient implements Ics100ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.list = this.list.bind(this);
    this.listByDesiredTaker = this.listByDesiredTaker.bind(this);
    this.listByMaker = this.listByMaker.bind(this);
    this.listByTaker = this.listByTaker.bind(this);
    this.details = this.details.bind(this);
    this.bidDetailsbyOrder = this.bidDetailsbyOrder.bind(this);
    this.bidDetailsbyBidder = this.bidDetailsbyBidder.bind(this);
  }

  list = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list: {
        limit,
        start_after: startAfter
      }
    });
  };
  listByDesiredTaker = async ({
    desiredTaker,
    limit,
    startAfter
  }: {
    desiredTaker: string;
    limit?: number;
    startAfter?: string;
  }): Promise<ListByDesiredTakerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_by_desired_taker: {
        desired_taker: desiredTaker,
        limit,
        start_after: startAfter
      }
    });
  };
  listByMaker = async ({
    limit,
    maker,
    startAfter
  }: {
    limit?: number;
    maker: string;
    startAfter?: string;
  }): Promise<ListByMakerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_by_maker: {
        limit,
        maker,
        start_after: startAfter
      }
    });
  };
  listByTaker = async ({
    limit,
    startAfter,
    taker
  }: {
    limit?: number;
    startAfter?: string;
    taker: string;
  }): Promise<ListByTakerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_by_taker: {
        limit,
        start_after: startAfter,
        taker
      }
    });
  };
  details = async ({
    id
  }: {
    id: string;
  }): Promise<DetailsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      details: {
        id
      }
    });
  };
  bidDetailsbyOrder = async ({
    limit,
    orderId,
    startAfter
  }: {
    limit?: number;
    orderId: string;
    startAfter?: string;
  }): Promise<BidDetailsbyOrderResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bid_detailsby_order: {
        limit,
        order_id: orderId,
        start_after: startAfter
      }
    });
  };
  bidDetailsbyBidder = async ({
    bidder,
    orderId
  }: {
    bidder: string;
    orderId: string;
  }): Promise<BidDetailsbyBidderResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bid_detailsby_bidder: {
        bidder,
        order_id: orderId
      }
    });
  };
}
export interface Ics100Interface extends Ics100ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  makeSwap: ({
    buyToken,
    desiredTaker,
    expirationTimestamp,
    makerAddress,
    makerReceivingAddress,
    sellToken,
    sourceChannel,
    sourcePort,
    takeBids,
    timeoutHeight,
    timeoutTimestamp
  }: {
    buyToken: Coin;
    desiredTaker: string;
    expirationTimestamp: number;
    makerAddress: string;
    makerReceivingAddress: string;
    sellToken: Coin;
    sourceChannel: string;
    sourcePort: string;
    takeBids: boolean;
    timeoutHeight: Height;
    timeoutTimestamp: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  takeSwap: ({
    orderId,
    sellToken,
    takerAddress,
    takerReceivingAddress,
    timeoutHeight,
    timeoutTimestamp
  }: {
    orderId: string;
    sellToken: Coin;
    takerAddress: string;
    takerReceivingAddress: string;
    timeoutHeight: Height;
    timeoutTimestamp: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelSwap: ({
    makerAddress,
    orderId,
    timeoutHeight,
    timeoutTimestamp
  }: {
    makerAddress: string;
    orderId: string;
    timeoutHeight: HeightOutput;
    timeoutTimestamp: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  makeBid: ({
    orderId,
    sellToken,
    takerAddress,
    takerReceivingAddress
  }: {
    orderId: string;
    sellToken: Coin;
    takerAddress: string;
    takerReceivingAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  takeBid: ({
    bidder,
    orderId
  }: {
    bidder: string;
    orderId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelBid: ({
    bidder,
    orderId
  }: {
    bidder: string;
    orderId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Ics100Client extends Ics100QueryClient implements Ics100Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.makeSwap = this.makeSwap.bind(this);
    this.takeSwap = this.takeSwap.bind(this);
    this.cancelSwap = this.cancelSwap.bind(this);
    this.makeBid = this.makeBid.bind(this);
    this.takeBid = this.takeBid.bind(this);
    this.cancelBid = this.cancelBid.bind(this);
  }

  makeSwap = async ({
    buyToken,
    desiredTaker,
    expirationTimestamp,
    makerAddress,
    makerReceivingAddress,
    sellToken,
    sourceChannel,
    sourcePort,
    takeBids,
    timeoutHeight,
    timeoutTimestamp
  }: {
    buyToken: Coin;
    desiredTaker: string;
    expirationTimestamp: number;
    makerAddress: string;
    makerReceivingAddress: string;
    sellToken: Coin;
    sourceChannel: string;
    sourcePort: string;
    takeBids: boolean;
    timeoutHeight: Height;
    timeoutTimestamp: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      MakeSwap: {
        buy_token: buyToken,
        desired_taker: desiredTaker,
        expiration_timestamp: expirationTimestamp,
        maker_address: makerAddress,
        maker_receiving_address: makerReceivingAddress,
        sell_token: sellToken,
        source_channel: sourceChannel,
        source_port: sourcePort,
        take_bids: takeBids,
        timeout_height: timeoutHeight,
        timeout_timestamp: timeoutTimestamp
      }
    }, fee, memo, _funds);
  };
  takeSwap = async ({
    orderId,
    sellToken,
    takerAddress,
    takerReceivingAddress,
    timeoutHeight,
    timeoutTimestamp
  }: {
    orderId: string;
    sellToken: Coin;
    takerAddress: string;
    takerReceivingAddress: string;
    timeoutHeight: Height;
    timeoutTimestamp: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      TakeSwap: {
        order_id: orderId,
        sell_token: sellToken,
        taker_address: takerAddress,
        taker_receiving_address: takerReceivingAddress,
        timeout_height: timeoutHeight,
        timeout_timestamp: timeoutTimestamp
      }
    }, fee, memo, _funds);
  };
  cancelSwap = async ({
    makerAddress,
    orderId,
    timeoutHeight,
    timeoutTimestamp
  }: {
    makerAddress: string;
    orderId: string;
    timeoutHeight: HeightOutput;
    timeoutTimestamp: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      CancelSwap: {
        maker_address: makerAddress,
        order_id: orderId,
        timeout_height: timeoutHeight,
        timeout_timestamp: timeoutTimestamp
      }
    }, fee, memo, _funds);
  };
  makeBid = async ({
    orderId,
    sellToken,
    takerAddress,
    takerReceivingAddress
  }: {
    orderId: string;
    sellToken: Coin;
    takerAddress: string;
    takerReceivingAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      MakeBid: {
        order_id: orderId,
        sell_token: sellToken,
        taker_address: takerAddress,
        taker_receiving_address: takerReceivingAddress
      }
    }, fee, memo, _funds);
  };
  takeBid = async ({
    bidder,
    orderId
  }: {
    bidder: string;
    orderId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      TakeBid: {
        bidder,
        order_id: orderId
      }
    }, fee, memo, _funds);
  };
  cancelBid = async ({
    bidder,
    orderId
  }: {
    bidder: string;
    orderId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      CancelBid: {
        bidder,
        order_id: orderId
      }
    }, fee, memo, _funds);
  };
}